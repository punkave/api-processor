#!/usr/bin/env node

var program = require('commander'),
    fs = require('fs'),
    path = require('path'),
    nansen = require('../lib/nansen'),
    pjson = require('../package.json'),
    colors = require('colors');


var options = {};


var version = function(){
  console.log('\n\tnansen version '+ pjson.version);
}
var set = function(param, value) {
  options[param] = value;
}
var setParallel = function(value) {
  options.parallel = value;
}

program
  .usage('[options] <config_file>')
  .option('-v, --verbose', 'Verbose Logging', function(){ set('verbose', true) })
  .option('-d, --debug', 'Log debug info', function(){ set('debug', true) })
  .option('-p, --parallel [value] ', 'Process item requests in parallel', setParallel )
  .option('-P, --progress', 'Show progress bar during job', function(){ set('progress', true) })
  .option('-V, --version', 'Output the version number', version)
  .parse(process.argv);



if (process.argv.length <= 2) {
  program.help();

} else {

  for(var i=0; i < program.args.length; i++) {
    try{
      var config = require(path.dirname(fs.realpathSync(program.args[i])) + '/' + program.args[i].split('/').pop());
      nansen.job(config, options);
    } catch(e){
      console.log(("\nError reading config file ").red + program.args[i]);
      console.log("\n" + e + "\n");
    }
  }
  if (nansen.ready()) nansen.run();
}